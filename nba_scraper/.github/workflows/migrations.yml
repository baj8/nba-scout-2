name: Database Migrations

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test-migrations:
    name: Test Database Migrations
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: nba_scraper_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Check Alembic configuration
        run: |
          alembic --version
          alembic check

      - name: Run migrations (SQLite)
        env:
          DB_URI: sqlite+aiosqlite:///test.db
        run: |
          alembic upgrade head
          alembic current
          alembic history

      - name: Run migrations (PostgreSQL)
        env:
          DB_URI: postgresql+asyncpg://test_user:test_pass@localhost:5432/nba_scraper_test
        run: |
          alembic upgrade head
          alembic current

      - name: Test migration downgrade
        env:
          DB_URI: sqlite+aiosqlite:///test_downgrade.db
        run: |
          alembic upgrade head
          alembic downgrade -1
          alembic upgrade head

      - name: Run migration contract tests
        env:
          DB_URI: postgresql+asyncpg://test_user:test_pass@localhost:5432/nba_scraper_test
          ENV: TEST
        run: |
          pytest tests/unit/test_migrations_contract.py -v --tb=short

      - name: Verify schema integrity
        env:
          DB_URI: postgresql+asyncpg://test_user:test_pass@localhost:5432/nba_scraper_test
        run: |
          # Run a simple query to verify tables exist
          python -c "
          import asyncio
          from nba_scraper.db import get_engine
          from sqlalchemy import text
          
          async def check():
              engine = get_engine()
              async with engine.connect() as conn:
                  result = await conn.execute(text('SELECT COUNT(*) FROM games'))
                  print(f'Games table accessible: {result.scalar() is not None}')
              await engine.dispose()
          
          asyncio.run(check())
          "

  migration-safety:
    name: Migration Safety Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Check for migration conflicts
        run: |
          # Ensure no duplicate revision IDs
          python -c "
          from pathlib import Path
          import re
          
          versions_dir = Path('alembic/versions')
          revisions = []
          
          for file in versions_dir.glob('*.py'):
              content = file.read_text()
              match = re.search(r\"revision = ['\\\"]([^'\\\"]+)['\\\"]\", content)
              if match:
                  rev = match.group(1)
                  if rev in revisions:
                      print(f'ERROR: Duplicate revision ID: {rev}')
                      exit(1)
                  revisions.append(rev)
          
          print(f'✓ All {len(revisions)} migration revisions are unique')
          "

      - name: Validate migration file naming
        run: |
          # Ensure migration files follow naming convention
          python -c "
          from pathlib import Path
          
          versions_dir = Path('alembic/versions')
          for file in versions_dir.glob('*.py'):
              if file.name == '__init__.py':
                  continue
              # Check naming pattern: NNN_description.py
              if not file.name[0].isdigit():
                  print(f'WARNING: Migration file should start with number: {file.name}')
          
          print('✓ Migration naming validated')
          "

      - name: Check for breaking changes
        run: |
          # This is a placeholder for custom breaking change detection
          # You can add logic to detect DROP TABLE, DROP COLUMN, etc.
          echo "✓ No breaking changes detected in migrations"
