name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nba_scraper_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
        pip install ruff mypy types-python-dateutil types-pyyaml
    
    - name: Set up environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/nba_scraper_test" >> .env
    
    - name: Lint with ruff
      run: |
        ruff check src/ tests/
    
    - name: Type check with mypy
      run: |
        mypy src --package nba_scraper
    
    - name: Test with pytest and generate coverage
      run: |
        pytest tests/unit/ tests/integration/ \
          --cov=src/nba_scraper \
          --cov-report=xml \
          --cov-report=term-missing \
          --disable-warnings \
          -W error::DeprecationWarning:src.nba_scraper \
          -W ignore:ARC4\ has\ been\ moved\ to\ cryptography.hazmat.decrepit.ciphers.algorithms.ARC4:CryptographyDeprecationWarning \
          -ra
    
    - name: Check coverage threshold
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        import sys
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = float(root.attrib['line-rate']) * 100
            print(f'Total coverage: {coverage:.2f}%')
            if coverage < 90.0:
                print(f'‚ùå Coverage {coverage:.2f}% is below 90% threshold')
                sys.exit(1)
            else:
                print(f'‚úÖ Coverage {coverage:.2f}% meets 90% threshold')
        except FileNotFoundError:
            print('‚ùå coverage.xml not found')
            sys.exit(1)
        except Exception as e:
            print(f'‚ùå Error checking coverage: {e}')
            sys.exit(1)
        "
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  e2e:
    name: E2E Pipeline Tests
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nba_scraper_e2e_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
        pip install aiosqlite pytest-postgresql
    
    - name: Set up E2E test environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/nba_scraper_e2e_test" >> .env
        echo "E2E_TEST_MODE=true" >> .env
    
    - name: Run E2E pipeline smoke tests
      run: |
        pytest tests/e2e/ \
          --disable-warnings \
          -v \
          --tb=short \
          -x
    
    - name: Validate golden snapshots
      run: |
        echo "üîç Checking for golden snapshot differences..."
        if [ -n "$(git status --porcelain tests/e2e/golden/)" ]; then
          echo "‚ö†Ô∏è  Golden snapshots have changed:"
          git diff tests/e2e/golden/
          echo ""
          echo "üìù If these changes are expected, update the snapshots:"
          echo "   1. Run tests locally: pytest tests/e2e/"
          echo "   2. Review and commit the updated golden files"
          exit 1
        else
          echo "‚úÖ Golden snapshots are up to date"
        fi
    
    - name: Upload E2E test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-artifacts-${{ matrix.python-version }}
        path: |
          tests/e2e/golden/
          *.log
        retention-days: 7