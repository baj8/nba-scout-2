[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nba-scraper"
version = "1.0.1"
description = "NBA Historical Scraping & Ingestion Engine"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "NBA Scout", email = "contact@nbascout.com"}
]
keywords = ["nba", "basketball", "scraper", "api", "data", "analytics"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.11"

# Core runtime dependencies
dependencies = [
    # HTTP clients and API interaction
    "httpx>=0.25.0",
    "tenacity>=8.2.0",
    "aiofiles>=23.1.0",
    
    # Data validation and models
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    
    # Database
    "asyncpg>=0.28.0",
    "sqlalchemy[asyncio]>=2.0.0",
    
    # CLI and user interface
    "typer[all]>=0.9.0",
    "rich>=13.0.0",
    
    # Logging and structured logging
    "structlog>=23.0.0",
    
    # Data processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    
    # Configuration and environment
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    
    # Web scraping (for Basketball Reference)
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "selectolax>=0.3.0",
    
    # PDF processing (for NBA Game Books)
    "pypdf2>=3.0.0",
    
    # Monitoring and performance
    "psutil>=5.9.0",
    "prometheus-client>=0.17.0",
    
    # String matching (for referee name resolution)
    "rapidfuzz>=3.0.0",
    
    # Math and statistics
    "scipy>=1.11.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "types-python-dateutil>=2.8.0",
    "types-pyyaml>=6.0.0",
    "pre-commit>=3.3.0",
]

# Testing dependencies
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",  # Parallel test execution
    "factory-boy>=3.3.0",   # Test data factories
    "freezegun>=1.2.0",     # Time mocking
]

# Documentation dependencies  
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.23.0",
]

# Production monitoring
monitoring = [
    "prometheus-client>=0.17.0",
    "statsd>=4.0.0",
    "sentry-sdk>=1.32.0",
]

# All extras combined
all = [
    "nba-scraper[dev,test,docs,monitoring]"
]

[project.urls]
Homepage = "https://github.com/your-org/nba-scraper"
Documentation = "https://your-org.github.io/nba-scraper"
Repository = "https://github.com/your-org/nba-scraper.git"
"Bug Tracker" = "https://github.com/your-org/nba-scraper/issues"

[project.scripts]
nba-scraper = "nba_scraper.cli:app"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
nba_scraper = [
    "*.yaml", 
    "*.csv", 
    "*.sql",
    "py.typed"
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | venv
  | dist
  | build
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "scipy.*",
    "sklearn.*",
    "pypdf2.*",
    "bs4.*",
    "lxml.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "live_api: marks tests that make real API calls",
    "requires_db: marks tests that require database",
]
asyncio_mode = "auto"
filterwarnings = [
    "error::DeprecationWarning:src.nba_scraper.*",
    "ignore:ARC4 has been moved to cryptography\\.hazmat\\.decrepit\\.ciphers\\.algorithms\\.ARC4:CryptographyDeprecationWarning",
    "ignore::UserWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Ruff configuration (modern linter/formatter)
[tool.ruff]
target-version = "py311"
line-length = 100
exclude = [
    ".git",
    ".mypy_cache", 
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "dist",
    "build",
    "review_bundle_*",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "W",   # pycodestyle warnings
]
ignore = [
    "E501",  # line too long, handled by formatter
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["E402"]